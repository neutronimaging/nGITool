cmake_minimum_required(VERSION 3.5)
set(TARGET_NAME "nGITool")
project(${TARGET_NAME} VERSION 4.4 LANGUAGES CXX)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
find_package(Qt6 REQUIRED COMPONENTS Widgets Charts)

include_directories(
    ../../../imagingsuite/core/kipl/kipl/include
    ../../../imagingsuite/core/modules/ModuleConfig/include
    ../../../imagingsuite/core/modules/ReaderConfig
    ../../../imagingsuite/core/algorithms/ImagingAlgorithms/include
    ../../../imagingsuite/GUI/qt/QtAddons
    ../../../imagingsuite/GUI/qt/QtImaging
    ../../../imagingsuite/GUI/qt/QtModuleConfigure
    ../../../imagingsuite/core/modules/ReaderGUI
    ../../../imagingsuite/core/algorithms/ImagingAlgorithms/include
    ../../frameworks/ngi/nGIFramework/include/
    Qt6Widgets_INCLUDE_DIRS/QtCharts
)

if (APPLE)
include_directories(
    ../../../ExternalDependencies/macos/include
    )
endif()

if (WIN32)
include_directories(
    ../../external/include/
    )
endif()

set(SRC_FILES
    src/main.cpp		
    src/ngimainwindow.cpp	
# ngireport.cpp
	

)

set(INC_FILES
    src/ngimainwindow.h		
# ngireport.h	
)

set(UI_FILES
    src/ngimainwindow.ui
)

# The MACOSX_BUNDLE_ICON_FILE variable is added to the Info.plist
# generated by CMake. This variable contains the .icns file name,
# without the path.
set(MACOSX_BUNDLE_ICON_FILE ngi_icon.icns)

# And the following tells CMake where to find and install the file itself.
set(app_icon_macos "${CMAKE_CURRENT_SOURCE_DIR}/src/ngi_icon.icns")
set(APP_ICON_RESOURCE_WINDOWS "${CMAKE_CURRENT_SOURCE_DIR}/src/ngi_icon.rc")
set_source_files_properties(${app_icon_macos} PROPERTIES
        MACOSX_PACKAGE_LOCATION "Resources")

# qt_add_executable(${TARGET_NAME} MACOSX_BUNDLE  ${app_icon_macos})

message(MuhRec Qt${QT_VERSION_MAJOR})


qt_add_executable(${TARGET_NAME}
    MANUAL_FINALIZATION
    ${SRC_FILES}
    ${INC_FILES}
    ${UI_FILES}
    ${app_icon_macos}
    ${APP_ICON_RESOURCE_WINDOWS}
)

target_link_directories(${TARGET_NAME} PUBLIC
    ../../../install/lib
    )

if (WIN32)

    target_link_libraries(${TARGET_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Core
        Qt${QT_VERSION_MAJOR}::Widgets
        kipl
        ModuleConfig
        ImagingAlgorithms
        ReaderConfig
        QtAddons
        ReaderGUI
        QtModuleConfigure
        ReconFramework
        QtImaging
    )
endif()

if (UNIX)
    target_link_libraries(${TARGET_NAME} PRIVATE
        Qt${QT_VERSION_MAJOR}::Core
        Qt${QT_VERSION_MAJOR}::Widgets
        
        kipl
        ModuleConfig
        ImagingAlgorithms
        ReaderConfig
        QtAddons
        ReaderGUI
        QtModuleConfigure
        nGIFramework
        QtImaging
        ${CFITSIO_LIBRARIES}
    )
endif()

set_target_properties(${TARGET_NAME} PROPERTIES
    MACOSX_BUNDLE_NAME MuhRec
    MACOSX_BUNDLE_GUI_IDENTIFIER ch.psi.ngitool
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(${TARGET_NAME})
endif()

install(TARGETS ${TARGET_NAME} DESTINATION ${CMAKE_INSTALL_PREFIX}/applications
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/applications/${TARGET_NAME}.app/Contents/Frameworks)
